raleighmap
load("/Volumes/BANGBANG/fijiheatmap.RData")
library(ggmap)
library(ggplot2)
View(quakesloc)
View(quakesloc)
View(quakesloc)
help(frequency)
quakes$stations
factor(quakes$stations)
tablestat <- table(quakes$stations)
tablestat2 <- as.data.frame(tablestat)
tablestat2
namestablestat2
names(tablestat2)
names(tablestat2)[1] -> "station"
names(quakes)
factors(mag)
gactor(mag)
factor(mag)
factor(quakes$mag)
magtab <- table(quakes$mag)
magdf <- as.data.frame(magtab)
magdf
names(magdf)[1] -> mag
names(magdf)
magdf
names(magdf)[1] -> 'mag'
names(magdf)
names(magdf)[1] -> "mag"
names(magdf)
magdf
plot(fijimap)
locationQuakes <- as.data.frame(table(quakes$long, quakes$lat))
names(locationQuakes)
locationQuakes$Freq
View(locationQuakes)
View(magdf)
ggmapplot(fijimap) + geom_tile(data= quakes, aes(x=long,y=lat, alpha= mag), fill='red')
ggmap(fijimap) + geom_tile(data= quakes, aes(x=long,y=lat, alpha= mag), fill='red')
quakes
names(quakes)
ggmap(fijimap) + geom_tile(data= quakes, aes(x=quakes$long,y=quakes$lat, alpha= mag), fill='red')
View(magdf)
ggmap(fijimap) + geom_tile(data= quakes, aes(x=quakes$long,y=quakes$lat, alpha= magdf$Freq), fill='red')
ggmap(fijimap) + geom_tile(data= quakes, aes(x=quakes$long,y=quakes$lat, alpha=), fill='red')
as.data.frame(table(quakes$mag)) -> magdf
View(magdf)
View(magdf)
ggmap(fijimap) + geom_tile(data= quakes, aes(x=quakes$long,y=quakes$lat, alpha=), fill='red')
ggmap(fijimap) + geom_tile(data= quakes, aes(x=quakes$long,y=quakes$lat), fill='red')
ggmap(fijimap) + ggplot(data= quakes, aes(x=quakes$long,y=quakes$lat), fill='red')
class(quakes$long)
View(locationQuakes)
ggmap(fijimap) + ggplot(locationQuakes)
class(locationQuakes)
raleigh
dailyCrimes
install.packages("installr")
library(jsonlite)
base <- "http://api.census.gov/data/2015/acs1?get=NAME,"
area = "&for=public+use+microdata+area:"
st <- "&in=state:37&key="
areas <- list(raleigh = "01201", ndurham = "01302", sdurham = "01301")
key <- "1a496ea921a28f83075cd782269dffa65bb9ec49"
acs <- paste(base, key, sep = "")
acs
readLines(acs)
bin <- readLines(acs)
bin
base <- "http://api.census.gov/data/2015/acs1?get=NAME,"
area = "&for=public+use+microdata+area:"
st <- "&in=state:37&key="
areas <- list(raleigh = "01201", ndurham = "01302", sdurham = "01301")
key <- "1a496ea921a28f83075cd782269dffa65bb9ec49"
acs <- paste(base,area,st,areas$ndurham,key, sep = "")
bin <- readLines(acs)
bin
key <- "94e6bfaef47f4c565392513b4932aa7dee51b089"
acs <- paste(base,area,st,areas$ndurham,key, sep = "")
bin <- readLines(acs)
bin
base <- "http://api.census.gov/data/2015/acs1?get=NAME,"
area = "&for=public+use+microdata+area:"
st <- "&in=state:37&key="
areas <- list(raleigh = "01201", ndurham = "01302", sdurham = "01301")
key <- "94e6bfaef47f4c565392513b4932aa7dee51b089"
acs <- paste(base,area,st,areas$ndurham,key, sep = "")
acs
base <- "http://api.census.gov/data/2015/acs1?get=NAME,"
area = "&for=public+use+microdata+area:"
st <- "&in=state:37&key="
areas <- list(raleigh = "01201", ndurham = "01302", sdurham = "01301")
key <- "94e6bfaef47f4c565392513b4932aa7dee51b089"
acs <- paste(base,area,st,areas$ndurham,key, sep = "")
acs
acs <- paste(base,area,areas$ndurham,st,key, sep = "")
base <- "http://api.census.gov/data/2015/acs1?get=NAME,"
area = "&for=public+use+microdata+area:"
st <- "&in=state:37&key="
areas <- list(raleigh = "01201", ndurham = "01302", sdurham = "01301")
key <- "94e6bfaef47f4c565392513b4932aa7dee51b089"
acs <- paste(base,area,st,areas$ndurham,key, sep = "")
acs <- paste(base,area,areas$ndurham,st,key, sep = "")
acs
bin <- readLines(acs)
bin
var <- "B00001_001E"
acs <- paste(base,var,area,areas$ndurham,st,key, sep = "")
bin <- readLines(acs)
bin <- readLines(acs, warn = FALSE)
bin
var <- "B00002_001E"
acs <- paste(base,var,area,areas$ndurham,st,key, sep = "")
bin <- readLines(acs, warn = FALSE)
bin
df <- `Spreadsheet.(2)`
`Spreadsheet.(2)` <- read.csv("~/Downloads/Spreadsheet (2).csv")
View(`Spreadsheet.(2)`)
df <- `Spreadsheet.(2)`
att <- df[which(df$Type == "Attached"),]
att$Closing.Date <- as.Date(att$Closing.Date, '%m/%d/%Y')
att$Closing.Date <- as.numeric(format(att$Closing.Date, '%Y'))
att$Sold.Price <- gsub("\\$", "", att$Sold.Price)
att$Sold.Price <- gsub(",", "", att$Sold.Price)
att$Sold.Price <- as.numeric(att$Sold.Price)
yearBreak(att, att$Closing.Date, 1998:2015)
med05 <- median(`year 2005`$Sold.Price)
med06 <- median(`year 2006`$Sold.Price)
med07 <- median(`year 2007`$Sold.Price)
med08 <- median(`year 2008`$Sold.Price)
med09 <- median(`year 2009`$Sold.Price)
med10 <- median(`year 2010`$Sold.Price)
flights
library(tidyverse)
flights
library(nycflights13)
flights
flights %>% group_by(carrier, dest) %>%
summarise(n())
not_cancelled
flights %>%
arrange(is.na())
arrange(is.na(flights))
df <- tibble(x = c(5,2,NA))
df
arrange(df, is.na(x))
arrange(df, is.na(x), x)
arrange(df, is.na(x))
is.na(arrange(df, x))
is.na(arrange(df, desc(x)))
arrange(is.na(df$x))
flights %>%
View(flights)
View(flights)
between(dep_time, 0, 600 )
between(dep_time, 0, 600 )
flights %>%
between(dep_time, 0, 600 )
flights %>%
between(dep_time, 0, 600)
between(flights$dep_time)
between(flights$dep_time,0,600)
between(flights$dep_time,0,600) %>%
filter(flights$dep_time == TRUE)
filter(flights$dep_time == 'TRUE')
between(flights$dep_time,0,600) %>%
filter(flights$dep_time == 'TRUE')
count(is.na(flights$dep_time))
x <- is.na(flights$dep_time)
count(TRUE %in% x)
TRUE %in x
filter(flights$dep_time, is.na())
filter(flights, is.na(dep_time))
flights %>%
arrange(~,air_time)
flights %>%
arrange(air_time)
weather
planes
View(airports)
filter(airports, tzone == "America/North_Carolina")
filter(airports, name == starts_with(Raleigh))
filter(airports, name == starts_with('Raleigh'))
airports
filter(airports, name == starts_with('r'))
class(airports$name)
filter(airports, faa == 'RDU'
)
select(flights, contains("TIME"))
flights$dep_time
mutate(flights, dep_time/2400)
mutate(flights, dep_time/24)
mutate(flights, dep_time%/%24)
mutate(flights, ndep <- dep_time%/%24)
flights %>%
select(dep_time)
flights %>%
select(dep_time) %>%
mutate(ndep = dep_time / 2400)
mutate(ndep = dep_time / 24)
flights %>%
select(dep_time) %>%
mutate(ndep = dep_time / 24)
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
delays
not_cancelled %>%
group_by(tailnum)
not_cancelled %>%
group_by(month)
not_cancelled %>%
group_by(month) %>%
summarise(
delsy = median(arr_delay)
)
!is.na(flights)
n_disctinct(flights$tailnum)
n_distinct(flights$tailnum)
not_cancelled %>%
count(dest)
not_cancelled %>%
summarise(n = n(dest))
summarise(dest, n = n())
not_cancelled$dest %>%
summarise(n())
summarise(
)
not_cancelled %>%
summarise(dest)
not_cancelled %>%
summarise(d = n_distinct(dest))
not_cancelled %>%
summarise(dest, n = n()
)
summarise(not_cancelled$dest, n())
not_cancelled %>%
group_by(year, month, day) %>%
filter(rank(desc(arr_delay))<10)
popular_dests <- flights %>%
group_by(dest) %>%
filter(n()> 365)
populat_dests
popular_dests
popular_dests %>%
filter(arr_delay >0) %>%
mutate(propr_elay = arr_delay / sum(arr_delay)) %>%
select(year:day, dest, arr_delay, prop_delay)
popular_dests %>%
filter(arr_delay >0) %>%
mutate(propr_elay = arr_delay / sum(arr_delay)) %>%
select(year:day, dest, arr_delay, prop_delay)
popular_dests %>%
filter(arr_delay >0) %>%
mutate(prop_delay = arr_delay / sum(arr_delay)) %>%
select(year:day, dest, arr_delay, prop_delay)
flights$arr_delay
sum(flights(arr_delay))
sum(flights$arr_delay)
sum(flights$arr_delay)
sum(flights$arr_delay, na.rm = TRUE)
popular_destz
popular_dests
popular_dests %>%
filter(arr_delay > 0)
df <- tibble(c(-1,0,1))
df
df %>%
()
df <- tibble(c(-1,0,1))
colnames(df) <- 'x'
df
df %>%
filter(x > 0)
vignette("window-functions")
not_cancelled %>%
group_by(tailnum) %>%
arrange(desc(arr_delay))
not_cancelled %>%
select(tailnum, arr_delay, dep_delay) %>%
group_by(tailnum) %>%
arrange(desc(arr_delay))
not_cancelled %>%
select(dep_time, arr_delay, dep_delay) %>%
arrange(desc(arr_delay), desc(dep_delay))
not_cancelled %>%
select(dep_time, arr_delay, dep_delay) %>%
arrange(arr_delay, dep_delay)
library(shiny); print(source('Desktop/Programming/R/Test Environment/NHL/NHLapp2.R')$value)
print(source('Desktop/Programming/R/Test Environment/NHL/NHLapp2.R')$value)
setwd("~/Desktop/Programming/R/Test Environment/NHL")
print(source('NHLapp2.R')$value)
NHL2 <- read.delim("NHL2.txt")
View(NHL2)
require(httr)
require(jsonlite)
#Get data from Puckalytics.com (Thanks!)
requestURL <- GET("http://puckalytics.com/php/getplayerdata2.php?season=201617&sit=all&minutes=50&info=1&goal=1&corsi=1&pcts=1&pctteam=1&individual=1&faceoffs=1&")
bin <- content(requestURL, "text")
dat <- fromJSON(bin)
dat <- as.data.frame(bin)
writeBin(dat, "NHLapp2.txt")
readBin(dat)
readBin(dat, NHL2)
dat
read_delim(dat)
read_delim(dat, delim = ,)
read_csv(dat)
read_csv(bin)
View(NHL2)
